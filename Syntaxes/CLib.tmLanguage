<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array/>
	<key>name</key>
	<string>POSIX</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>aio.h - asynchronous input and output</string>
			<key>match</key>
			<string>\b(?:AIO_(?:ALLDONE|CANCELED|NOTCANCELED|NOP)|LIO_(?:NOP|NOWAIT|READ|WAIT|WRITE))\b</string>
			<key>name</key>
			<string>support.constant.aio.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>cpio.h - cpio archive values</string>
			<key>match</key>
			<string>\b(?:C_I(?:R(?:USR|GRP|OTH)|S(?:UID|GID|VTX|DIR|FIFO|REG|BLK|CHR|CTG|LNK|SOCK)|W(?:USR|GRP|OTH)|X(?:USR|GRP|OTH))|MAGIC)\b</string>
			<key>name</key>
			<string>support.constant.cpio.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>dlfcn.h - dynamic linking</string>
			<key>match</key>
			<string>\b(?:RTLD_(?:LAZY|NOW|GLOBAL|LOCAL))\b</string>
			<key>name</key>
			<string>support.constant.dlfcn.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fcntl.h - file control options</string>
			<key>match</key>
			<string>\b(?:F_(?:DUPF(?:D|D_CLOEXEC)|GET(?:FD|FL|LK|OWN)|RDLCK|SET(?:FD|FL|LK|LKW|OWN)|UNLCK|WRLCK)|FD_CLOEXEC|O_(?:A(?:CCMODE|PPEND)|C(?:LOEXEC|REAT)|D(?:IRECTORY|SYNC)|E(?:XEC|XCL)|NO(?:CTTY|FOLLOW|NBLOCK)|R(?:DONLY|DWR|SYNC)|S(?:EARCH|YNC)|T(?:RUNC|TY_INIT)|WRONLY)|AT_(?:FDCWD|EACCESS|SYMLINK_(?:NOFOLLOW|FOLLOW)|REMOVEDIR)|POSIX_FADV_(?:DONTNEED|NO(?:REUSE|RMAL)|RANDOM|SEQUENTIAL|WILLNEED))\b</string>
			<key>name</key>
			<string>support.constant.fcntl.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fmtmsg.h - message display structures</string>
			<key>match</key>
			<string>\b(?:MM_(?:HARD|SOFT|FIRM|APPL|UTIL|OPSYS|RECOVER|NRECOV|HALT|ERROR|WARNING|INFO|NOSEV|PRINT|CONSOLE|NULL(?:LBL|SEV|MC|TXT|ACT|TAG)|OK|NO(?:MSG|TOK|CON)))\b</string>
			<key>name</key>
			<string>support.constant.fmtmsg.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fnmatch.h - filename-matching types</string>
			<key>match</key>
			<string>\b(?:FNM_(?:NOMATCH|PATHNAME|PERIOD|NOESCAPE))\b</string>
			<key>name</key>
			<string>support.constant.fnmatch.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>ftw.h - file tree traversal</string>
			<key>match</key>
			<string>\b(?:FTW_(?:PHYS|MOUNT|DEPTH|CHDIR|F|D|DNR|DP|NS|SL|SLN))\b</string>
			<key>name</key>
			<string>support.constant.ftw.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>glob.h - pathname pattern-matching types</string>
			<key>match</key>
			<string>\b(?:GLOB_(?:APPEND|DOOFFS|ERR|MARK|NOCHECK|NOESCAPE|NOSORT|ABORTED|NOMATCH|NOSPACE))\b</string>
			<key>name</key>
			<string>support.constant.glob.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>langinfo.h - language information constants</string>
			<key>match</key>
			<string>\b(?:CODESET|D_T_FMT|(?:D|T)_FMT|T_FMT_AMPM|(?:AM|PM)_STR|(?:AB)?DAY_(?:[1-7])|(?:AB)?MON_(?:[1-9]|10|11|12)|ER(?:A|A_D_FMT|A_D_T_FMT|A_T_FMT)|ALT_DIGITS|RADIXCHAR|THOUSEP|YESEXPR|NOEXPR|CRNCYSTR)\b</string>
			<key>name</key>
			<string>support.constant.langinfo.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>ndbm.h - ndbm database operations</string>
			<key>match</key>
			<string>\b(?:DBM_(?:INSERT|REPLACE))\b</string>
			<key>name</key>
			<string>support.constant.ndbm.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>net/if.h - sockets local interfaces</string>
			<key>match</key>
			<string>\b(?:IF_NAMESIZE)\b</string>
			<key>name</key>
			<string>support.constant.net/if.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>netdb.h - network database operations</string>
			<key>match</key>
			<string>\b(?:AI_(?:PASSIVE|CANONNAME|NUMERICHOST|NUMERICSERV|V4MAPPED|ALL|ADDRCONFIG)|EAI_(?:AGAIN|BADFLAGS|FAIL|FAMILY|MEMORY|NONAME|SERVICE|SOCKTYPE|SYSTEM|OVERFLOW)|IPPORT_RESERVED|NI_(?:NOFQDN|NUMERICHOST|NAMEREQD|NUMERICSERV|NUMERICSCOPE|DGRAM))\b</string>
			<key>name</key>
			<string>support.constant.netdb.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>netinet/in.h - Internet address family</string>
			<key>match</key>
			<string>\b(?:INADDR_(?:ANY|BROADCAST)|INET(?:_|6_)ADDRSTRLEN|IPPROTO_(?:IP|IPV6|ICMP|RAW|TCP|UDP)|IPV6_(?:(?:JOIN|LEAVE)_GROUP|MULTICAST_(?:HOPS|IF|LOOP)|UNICAST_HOPS|V6ONLY))\b</string>
			<key>name</key>
			<string>support.constant.netinet/in.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>netinet/tcp.h - definitions for TCP</string>
			<key>match</key>
			<string>\b(?:TCP_NODELAY)\b</string>
			<key>name</key>
			<string>support.constant.netinet/tcp.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>nl_types.h - data types</string>
			<key>match</key>
			<string>\b(?:NL_(?:SETD|CAT_LOCALE))\b</string>
			<key>name</key>
			<string>support.constant.nl_types.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>poll.h - the poll() function</string>
			<key>match</key>
			<string>\b(?:POLL(?:IN|RDNORM|RDBAND|PRI|OUT|WRNORM|WRBAND|ERR|HUP|NVAL))\b</string>
			<key>name</key>
			<string>support.constant.poll.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>pthread.h - threads</string>
			<key>match</key>
			<string>\b(?:PTHREAD_(?:BARRIER_SERIAL_THREAD|CANCEL(?:_ASYNCHRONOUS|_ENABLE|_DEFERRED|_DISABLE|ED)|COND_INITIALIZER|CREATE_(?:DETACHED|JOINABLE)|EXPLICIT_SCHED|INHERIT_SCHED|MUTEX_(?:DEFAULT|ERRORCHECK|INITIALIZER|NORMAL|RECURSIVE|ROBUST|STALLED)|ONCE_INIT|PRIO_(?:INHERIT|NONE|PROTECT)|PROCESS_(?:SHARED|PRIVATE)|SCOPE_(?:PROCESS|SYSTEM)|RWLOCK_INITIALIZER))\b</string>
			<key>name</key>
			<string>support.constant.pthread.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>regex.h - regular expression matching types</string>
			<key>match</key>
			<string>\b(?:REG_(?:EXTENDED|ICASE|NEWLINE|NO(?:SUB|TBOL|TEOL|MATCH)|E(?:BRACK|BRACE|COLLATE|CTYPE|ESCAPE|PAREN|SUBREG|RANGE|SPACE)|BAD(?:RPT|PAT|BR)))\b</string>
			<key>name</key>
			<string>support.constant.regex.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sched.h - execution scheduling</string>
			<key>match</key>
			<string>\b(?:SCHED_(?:FIFO|RR|SPORADIC|OTHER))\b</string>
			<key>name</key>
			<string>support.constant.sched.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>semaphore.h - semaphores</string>
			<key>match</key>
			<string>\b(?:SEM_FAILED)\b</string>
			<key>name</key>
			<string>support.constant.semaphore.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>spawn.h - spawn</string>
			<key>match</key>
			<string>\b(?:POSIX_SPAWN_(?:RESETIDS|SET(?:PGROUP|SCHED(PARAM|ULER)|SIG(DEF|MASK))))\b</string>
			<key>name</key>
			<string>support.constant.spawn.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stropts.h - STREAMS interface</string>
			<key>match</key>
			<string>\b(?:I_(?:ATMARK|CANPUT|CKBAND|FDINSERT|FIND|FLUSH(BAND)?|GET(?:BAND|CLTIME|SIG)|(GRD|GWR)OPT|(UN)?LINK|LIST|LOOK|NREAD|PEEK|P(UN)?LINK|POP|PUSH|RECVFD|SENDFD|SET(?:CLTIME|SIG)|SRDOPT|STR|SWROPT)|FMNAMESZ|FLUSH(?:R|RW|W)|S_(?:BANDURG|ERROR|HANGUP|HIPRI|INPUT|MSG|OUTPUT|(?:RD|WR)(?:BAND|NORM))|RS_HIPRI|RMSG(D|N)|RNORM|RPROT(?:DAT|DIS|NORM)|SNDZERO|(?:ANY|LAST)MARK|MUXID_ALL|MORE(?:CTL|DATA)|MSG_(?:ANY|BAND|HIPRI))\b</string>
			<key>name</key>
			<string>support.constant.stropts.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/ipc.h - XSI interprocess communication</string>
			<key>match</key>
			<string>\b(?:IPC_(?:CREAT|EXCL|NOWAIT|PRIVATE|RMID|SET|STAT))\b</string>
			<key>name</key>
			<string>support.constant.sys/ipc.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/mman.h - memory management declarations</string>
			<key>match</key>
			<string>\b(?:PROT_(?:EXEC|NONE|READ|WRITE)|MAP_(?:FAILED|FIXED|PRIVATE|SHARED)|MS_(?:A?SYNC|INVALIDATE)|MCL_(?:CURRENT|FUTURE)|POSIX_(?:TYPED_MEM_(?:ALLOCATE(_CONTIG)?|MAP_ALLOCATABLE)|MADV_(?:(DONT|WILL)NEED|NORMAL|RANDOM|SEQUENTIAL)))\b</string>
			<key>name</key>
			<string>support.constant.sys/mman.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/msg.h - XSI message queue structures</string>
			<key>match</key>
			<string>\b(?:MSG_NOERROR)\b</string>
			<key>name</key>
			<string>support.constant.sys/msg.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/resource.h - XSI resource operations</string>
			<key>match</key>
			<string>\b(?:PRIO_(?:PROCESS|PGRP|USER)|RLIM_(?:INFINITY|SAVED_(MAX|CUR))|RUSAGE_(SELF|CHILDREN)|RLIMIT_(?:CORE|CPU|DATA|FSIZE|NOFILE|STACK|AS))\b</string>
			<key>name</key>
			<string>support.constant.sys/resource.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/select.h - select types</string>
			<key>match</key>
			<string>\b(?:FD_SETSIZE)\b</string>
			<key>name</key>
			<string>support.constant.sys/select.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/sem.h - XSI semaphore facility</string>
			<key>match</key>
			<string>\b(?:SEM_UNDO|GET(?:NCNT|PID|VAL|ALL|ZCNT)|SET(?:VAL|ALL))\b</string>
			<key>name</key>
			<string>support.constant.sys/sem.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/shm.h - XSI shared memory facility</string>
			<key>match</key>
			<string>\b(?:SHM(?:_RDONLY|_RND|LBA))\b</string>
			<key>name</key>
			<string>support.constant.sys/shm.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/socket.h - main sockets header</string>
			<key>match</key>
			<string>\b(?:AF_(?:INET6?|UNIX|UNSPEC)|MSG_(?:CTRUNC|DONTROUTE|EOR|OOB|NOSIGNAL|PEEK|TRUNC|WAITALL)|SCM_RIGHTS|SOL_SOCKET|SOCK_(?:DGRAM|RAW|SEQPACKET|STREAM)|SO_(?:ACCEPTCONN|BROADCAST|DEBUG|DONTROUTE|ERROR|KEEPALIVE|LINGER|OOBINLINE|(RCV|SND)(?:BUF|LOWAT|TIMEO)|REUSEADDR|TYPE)|SHUT_(?:RD(WR)?|WR)|SOMAXCONN)\b</string>
			<key>name</key>
			<string>support.constant.sys/socket.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/stat.h - data returned by the stat() function</string>
			<key>match</key>
			<string>\b(?:S_(?:IF(?:MT|BLK|CHR|IFO|REG|DIR|LNK|SOCK)|IR(?:GRP|OTH|WX(U|G|O)|USR)|IS(?:UID|GID|VTX)|(IW|IX)(?:GRP|OTH|USR))|UTIME_(?:NOW|OMIT))\b</string>
			<key>name</key>
			<string>support.constant.sys/stat.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/statvfs.h - VFS File System information structure</string>
			<key>match</key>
			<string>\b(?:ST_(?:RDONLY|NOSUID))\b</string>
			<key>name</key>
			<string>support.constant.sys/statvfs.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/time.h - time types</string>
			<key>match</key>
			<string>\b(?:ITIMER_(?:REAL|VIRTUAL|PROF))\b</string>
			<key>name</key>
			<string>support.constant.sys/time.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/wait.h - declarations for waiting</string>
			<key>match</key>
			<string>\b(?:W(?:CONTINUED|NOHANG|UNTRACED|EXITSTATUS|IF(?:CONTINUED|EXITED|SIGNALED|STOPPED)|STOPSIG|TERMSIG|EXITED|NOWAIT|STOPPED))\b</string>
			<key>name</key>
			<string>support.constant.sys/wait.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>syslog.h - definitions for system error logging</string>
			<key>match</key>
			<string>\b(?:LOG_(?:PID|CONS|(N|O)DELAY|NOWAIT|KERN|USER|MAIL|NEWS|UUCP|DAEMON|AUTH|CRON|LPR|LOCAL[0-7]|EMERG|ALERT|CRIT|ERR|WARNING|NOTICE|INFO|DEBUG))\b</string>
			<key>name</key>
			<string>support.constant.syslog.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>tar.h - extended tar definitions</string>
			<key>match</key>
			<string>\b(?:(?:AREG|BLK|CHR|CONT|DIR|FIFO|LNK|REG|SYM)TYPE|TMAG(?:IC|LEN)|TVERS(IO|LE)N|TS(U|G)ID|TSVTX|(?:TU|TG|TO)(?:READ|WRITE|EXEC))\b</string>
			<key>name</key>
			<string>support.constant.tar.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>termios.h - define values for termios</string>
			<key>match</key>
			<string>\b(?:BRKINT|BSDLY|CS(IZE|TOPB)|CREAD|CRDLY|CLOCAL|ECHO(?:|E|K|NL)|FFDLY|HUPCL|I(?:CANON|EXTEN|SIG|CRNL|GN(?:BRK|CR|PAR)|NLCR|NPCK|STRIP|X(?:ANY|OFF|ON))|NCCS|NLDLY|NOFLSH|OPOST|ONLCR|OCRNL|ONOCR|ONLRET|OFDEL|OFILL|PARMRK|PARENB|PARODD|T(?:ABDLY|OSTOP|CSA(?:NOW|FLUSH|DRAIN)|C(?:IO?|O)FLUSH|(?:CI|CO)(ON|OFF))|V(?:E(OF|OL)|ERASE|INTR|KILL|MIN|QUIT|START|STOP|SUSP|TIME|TDLY))\b</string>
			<key>name</key>
			<string>support.constant.termios.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>trace.h - tracing</string>
			<key>match</key>
			<string>\b(?:POSIX_TRACE_(?:ALL_EVENTS|APPEND|CLOSE_FOR_CHILD|FILTER|FLUSH(?:|_ST(ART|OP))|FLUSHING|FULL|LOOP|NO_OVERRUN|NOT_(?:FLUSHING|FULL|TRUNCATED)|INHERITED|OVER(FLOW|RUN)|RESUME|RUNNING|ST(ART|OP)|SUSPENDED|SYSTEM_EVENTS|TRUNCATED_RE(AD|CORD)|UNNAMED_USER_EVENT|UNTIL_FULL|WOPID_EVENTS))\b</string>
			<key>name</key>
			<string>support.constant.trace.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>utmpx.h - user accounting database definitions</string>
			<key>match</key>
			<string>\b(?:EMPTY|(?:BOOT|OLD|NEW)_TIME|(?:USER|INIT|LOGIN|DEAD)_PROCESS)\b</string>
			<key>name</key>
			<string>support.constant.utmpx.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>wordexp.h - word-expansion types</string>
			<key>match</key>
			<string>\b(?:WRDE_(?:APPEND|DOOFFS|NOCMD|REUSE|SHOWERR|UNDEF|BAD(CHAR|VAL)|CMDSUB|NOSPACE|SYNTAX))\b</string>
			<key>name</key>
			<string>support.constant.wordexp.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>trace.h - tracing</string>
			<key>match</key>
			<string>\b(?:POSIX_TRACE_(?:ALL_EVENTS|APPEND|CLOSE_FOR_CHILD|FILTER|FLUSH(?:|_ST(ART|OP))|FLUSHING|FULL|LOOP|NO_OVERRUN|NOT_(?:FLUSHING|FULL|TRUNCATED)|INHERITED|OVER(FLOW|RUN)|RESUME|RUNNING|ST(ART|OP)|SUSPENDED|SYSTEM_EVENTS|TRUNCATED_RE(AD|CORD)|UNNAMED_USER_EVENT|UNTIL_FULL|WOPID_EVENTS))\b</string>
			<key>name</key>
			<string>support.constant.trace.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>dirent.h - format of directory entries</string>
			<key>match</key>
			<string>\b(?:DIR)\b</string>
			<key>name</key>
			<string>support.type.dirent.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fcntl.h - file control options</string>
			<key>match</key>
			<string>\b(?:f(?:codeblobs|signatures|store|bootstraptransfer|ilesec_property)_t)\b</string>
			<key>name</key>
			<string>support.type.fcntl.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>ftw.h - file tree traversal</string>
			<key>match</key>
			<string>\b(?:FTW)\b</string>
			<key>name</key>
			<string>support.type.ftw.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>glob.h - pathname pattern-matching types</string>
			<key>match</key>
			<string>\b(?:glob_t)\b</string>
			<key>name</key>
			<string>support.type.glob.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>iconv.h - codeset conversion facility</string>
			<key>match</key>
			<string>\b(?:iconv_t)\b</string>
			<key>name</key>
			<string>support.type.iconv.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>mqueue.h - message queues</string>
			<key>match</key>
			<string>\b(?:mqd_t)\b</string>
			<key>name</key>
			<string>support.type.mqueue.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>ndbm.h - ndbm database operations</string>
			<key>match</key>
			<string>\b(?:DBM|datum)\b</string>
			<key>name</key>
			<string>support.type.ndbm.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>netinet/in.h - Internet address family</string>
			<key>match</key>
			<string>\b(?:in_(?:port_t|addr_t))\b</string>
			<key>name</key>
			<string>support.type.netinet/in.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>nl_types.h - data types</string>
			<key>match</key>
			<string>\b(?:nl_(?:catd|item))\b</string>
			<key>name</key>
			<string>support.type.nl_types.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>poll.h - the poll() function</string>
			<key>match</key>
			<string>\b(?:nfds_t)\b</string>
			<key>name</key>
			<string>support.type.poll.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>regex.h - regular expression matching types</string>
			<key>match</key>
			<string>\b(?:reg(?:ex|off|match)_t)\b</string>
			<key>name</key>
			<string>support.type.regex.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>search.h - search tables</string>
			<key>match</key>
			<string>\b(?:ENTRY|VISIT|ACTION)\b</string>
			<key>name</key>
			<string>support.type.search.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>semaphore.h - semaphores</string>
			<key>match</key>
			<string>\b(?:sem_t)\b</string>
			<key>name</key>
			<string>support.type.semaphore.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>spawn.h - spawn</string>
			<key>match</key>
			<string>\b(?:posix_spawn(?:attr|_file_actions)_t)\b</string>
			<key>name</key>
			<string>support.type.spawn.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stropts.h - STREAMS interface</string>
			<key>match</key>
			<string>\b(?:t_u?scalar_t)\b</string>
			<key>name</key>
			<string>support.type.stropts.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/msg.h - XSI message queue structures</string>
			<key>match</key>
			<string>\b(?:msg(?:qnum|len)_t)\b</string>
			<key>name</key>
			<string>support.type.sys/msg.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/resource.h - XSI resource operations</string>
			<key>match</key>
			<string>\b(?:rlim_t)\b</string>
			<key>name</key>
			<string>support.type.sys/resource.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/shm.h - XSI shared memory facility</string>
			<key>match</key>
			<string>\b(?:shmatt_t)\b</string>
			<key>name</key>
			<string>support.type.sys/shm.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/socket.h - main sockets header</string>
			<key>match</key>
			<string>\b(?:(?:socklen|sa_family)_t)\b</string>
			<key>name</key>
			<string>support.type.sys/socket.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/types.h - data types</string>
			<key>match</key>
			<string>\b(?:(?:blk(cnt|size)|clock(id)?|dev|fs(blk|fil)cnt|gid|id|ino|key|mode|nlink|off|pid|pthread_(?:attr|(?:barrier|cond|mutex|rwlock)(attr)?|key|once|spinlock)|pthread|s?size|suseconds|timer?|trace_(?:attr|event_(id|set)|id)|uid)_t)\b</string>
			<key>name</key>
			<string>support.type.sys/types.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>sys/wait.h - declarations for waiting</string>
			<key>match</key>
			<string>\b(?:idtype_t)\b</string>
			<key>name</key>
			<string>support.type.sys/wait.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>termios.h - define values for termios</string>
			<key>match</key>
			<string>\b(?:(?:cc|speed|tcflag)_t)\b</string>
			<key>name</key>
			<string>support.type.termios.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>ulimit.h - ulimit commands</string>
			<key>match</key>
			<string>\b(?:UL_(GET|SET)FSIZE)\b</string>
			<key>name</key>
			<string>support.type.ulimit.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>wordexp.h - word-expansion types</string>
			<key>match</key>
			<string>\b(?:wordexp_t)\b</string>
			<key>name</key>
			<string>support.type.wctype.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>netinet/in.h - Internet address family</string>
			<key>match</key>
			<string>\b(?:in6addr_(?:any|loopback))\b</string>
			<key>name</key>
			<string>support.variable.netinet/in.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>unistd.h - standard symbolic constants and types</string>
			<key>match</key>
			<string>\b(?:opt(?:arg|err|ind|opt))\b</string>
			<key>name</key>
			<string>support.variable.unistd.c</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.aio.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>aio.h - asynchronous input and output</string>
					<key>match</key>
					<string>(\s*)(\b(?:aio_(?:cancel|error|fsync|read|return|suspend|write)|lio_listio)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.arpa/inet.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>arpa/inet.h - definitions for internet operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:hton(?:l|s)|ntoh(?:l|s)|inet_(?:addr|ntoa|ntop|pton))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.dirent.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>dirent.h - format of directory entries</string>
					<key>match</key>
					<string>(\s*)(\b(?:alphasort|dirfd|readdir_r|(close|fdopen|open|read|rewind|scan|seek|tell)(dir))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.dlfcn.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>dlfcn.h - dynamic linking</string>
					<key>match</key>
					<string>(\s*)(\b(?:dl(?:close|error|open|sym))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.fcntl.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fcntl.h - file control options</string>
					<key>match</key>
					<string>(\s*)(\b(?:creat|fcntl|open|openat|posix_f(?:advise|allocate))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.fmtmsg.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fmtmsg.h - message display structures</string>
					<key>match</key>
					<string>(\s*)(\b(?:fmtmsg)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.fnmatch.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fnmatch.h - filename-matching types</string>
					<key>match</key>
					<string>(\s*)(\b(?:fnmatch)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.ftw.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ftw.h - file tree traversal</string>
					<key>match</key>
					<string>(\s*)(\b(?:ftw|nftw)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.glob.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>glob.h - pathname pattern-matching types</string>
					<key>match</key>
					<string>(\s*)(\b(?:glob(?:free)?)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.grp.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>grp.h - group structure</string>
					<key>match</key>
					<string>(\s*)(\b(?:endgrent|getgr(?:ent|gid|gid_r|nam|nam_r)|setgrent)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.iconv.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>iconv.h - codeset conversion facility</string>
					<key>match</key>
					<string>(\s*)(\b(?:icon(?:v|v_close|v_open))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.langinfo.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>langinfo.h - language information constants</string>
					<key>match</key>
					<string>(\s*)(\b(?:nl_langinfo(?:_l)?)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.libgen.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>libgen.h - definitions for pattern matching functions</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:base|dir)name)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.monetary.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>monetary.h - monetary types</string>
					<key>match</key>
					<string>(\s*)(\b(?:strfmon(?:|_l))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.mqueue.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>mqueue.h - message queues</string>
					<key>match</key>
					<string>(\s*)(\b(?:mq_(?:close|getattr|notify|open|receive|send|setattr|timed(?:receive|send)|unlink))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.ndbm.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ndbm.h - ndbm database operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:dbm_(?:clearerr|close|delete|error|fetch|firstkey|nextkey|open|store))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.net/if.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>net/if.h - sockets local interfaces</string>
					<key>match</key>
					<string>(\s*)(\b(?:if_(?:indextoname|(?:freename|name(?:to)?)index))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.netdb.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>netdb.h - network database operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:end(?:host|net|proto|serv)ent|freeaddrinfo|gai_strerror|get(?:addrinfo|hostent|nameinfo|net(?:byaddr|byname|ent)|proto(?:byname|bynumber|ent)|serv(?:byname|byport|ent))|set(?:host|net|proto|serv)ent)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.netinet/in.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>netinet/in.h - internet address family</string>
					<key>match</key>
					<string>(\s*)(\b(?:IN6_IS_ADDR_(?:UNSPECIFIED|LOOPBACK|MULTICAST|(?:LINK|SITE)LOCAL|V4(?:MAPPED|COMPAT)|MC_(?:(?:NODE|LINK|SITE|ORG)LOCAL|GLOBAL)))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.nl_types.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>nl_types.h - data types</string>
					<key>match</key>
					<string>(\s*)(\b(?:cat(?:close|gets|open))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.poll.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>poll.h - the poll() function</string>
					<key>match</key>
					<string>(\s*)(\b(?:poll)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.pthread.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>pthread.h - threads</string>
					<key>match</key>
					<string>(\s*)(\b(?:pthread_(?:atfork|attr_(?:destroy|(?:get|set)(?:detachstate|guardsize|inheritsched|sched(?:param|policy)|scope|stack(size)?)|init)|barrier(?:_destroy|_init|_wait|attr_(?:destroy|getpshared|init|setpshared))|cancel|cleanup_(?:pop|push)|cond(?:_broadcast|_destroy|_init|_signal|_timedwait|_wait|attr_(?:destroy|get(?:clock|pshared)|init|setclock|setpshared))|create|detach|equal|exit|get(?:concurrency|cpuclockid|schedparam|specific)|join|key_(?:create|delete)|mutex(?:_consistent|_destroy|_getprioceiling|_init|_(?:|timed|try|un)lock|_setprioceiling|attr_(?:destroy|get(?:prioceiling|protocol|pshared|robust|type)|init|set(?:prioceiling|protocol|pshared|robust|type)))|once|rwlock(?:_destroy|_init|_rdlock|_timed(?:wrlock|rdlock)|_try(?:rdlock|wrlock)|_(?:un|wr)lock|attr_(?:destroy|getpshared|init|setpshared))|self|set(?:cancel(?:state|type)|concurrency|schedparam|schedprio|specific)|spin_(?:destroy|init|(?:|try|un)lock)|testcancel))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.pwd.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>pwd.h - password structure</string>
					<key>match</key>
					<string>(\s*)(\b(?:get(?:pw(?:nam|uid|ent)(_r)?)|(?:end|set)pwent)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.regex.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>regex.h - regular expression matching types</string>
					<key>match</key>
					<string>(\s*)(\b(?:reg(?:comp|error|exec|free))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sched.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sched.h - execution scheduling</string>
					<key>match</key>
					<string>(\s*)(\b(?:sched_(?:get_priority_(?:max|min)|get(?:param|scheduler)|rr_get_interval|set(?:param|scheduler)|yield))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.search.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>search.h - search tables</string>
					<key>match</key>
					<string>(\s*)(\b(?:hcreate|hdestroy|hsearch|insque|lfind|lsearch|remque|tdelete|tfind|tsearch|twalk)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.semaphore.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>semaphore.h - semaphores</string>
					<key>match</key>
					<string>(\s*)(\b(?:sem_(?:close|destroy|getvalue|init|open|post|(?:timed|try|)wait|unlink))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.spawn.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>spawn.h - spawn</string>
					<key>match</key>
					<string>(\s*)(\b(?:posix_spawn(?:|_file_actions_(?:add(close|dup2|open)|destroy|init)|attr_(?:destroy|get(flags|pgroup|schedparam|schedpolicy|sigdefault|sigmask)|init|set(flags|pgroup|schedparam|schedpolicy|sigdefault|sigmask))|p))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.strings.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>strings.h - string operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:ffs|strn?casecmp(_l)?)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stropts.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stropts.h - STREAMS interface</string>
					<key>match</key>
					<string>(\s*)(\b(?:f(?:att|det)ach|getp?msg|ioctl|isastream|putp?msg)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/ipc.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/ipc.h - XSI interprocess communication</string>
					<key>match</key>
					<string>(\s*)(\b(?:ftok)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/mman.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/mman.h - memory management declarations</string>
					<key>match</key>
					<string>(\s*)(\b(?:mlock(all)?|mmap|mprotect|msync|munlock(?:|all)|munmap|posix_(?:madvise|mem_offset|typed_mem_(?:get_info|open))|shm_(?:open|unlink))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/msg.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/msg.h - XSI message queue structures</string>
					<key>match</key>
					<string>(\s*)(\b(?:msg(?:ctl|get|rcv|snd))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/resource.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/resource.h - XSI resource operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:get(?:priority|rlimit|rusage)|set(?:priority|rlimit))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/select.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/select.h - select types</string>
					<key>match</key>
					<string>(\s*)(\b(?:FD_(?:CLR|ISSET|SET|ZERO)|p?select)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/sem.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/sem.h - XSI semaphore facility</string>
					<key>match</key>
					<string>(\s*)(\b(?:sem(?:ctl|get|op))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/shm.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/shm.h - XSI shared memory facility</string>
					<key>match</key>
					<string>(\s*)(\b(?:shm(?:at|ctl|dt|get))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/socket.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/socket.h - main sockets header</string>
					<key>match</key>
					<string>(\s*)(\b(?:CMSG_(?:DATA|NXTHDR|FIRSTHDR)|accept|bind|connect|get(?:peername|sock(?:name|opt))|listen|recv(?:from|msg|)|send(?:msg|to|sockopt|)|setsockopt|shutdown|sock(?:atmark|et(pair)?))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/stat.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/stat.h - data returned by the stat() function</string>
					<key>match</key>
					<string>(\s*)(\b(?:S_(?:IS(?:BLK|CHR|DIR|FIFO|REG|LNK|SOCK)|TYPEIS(?:MQ|SEM|SHM|TMO))|f?chmod(at)?|(?:fstat|mkdir|mkfifo|mknod)(at)?|futimens|lstat|stat|umask|utimensat)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/statvfs.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/statvfs.h - VFS File System information structure</string>
					<key>match</key>
					<string>(\s*)(\b(?:f?statvfs)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/time.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/time.h - time types</string>
					<key>match</key>
					<string>(\s*)(\b(?:get(?:itimer|timeofday)|setitimer|utimes|select)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/uio.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/uio.h - definitions for vector I/O operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:read|write)v)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/utsname.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/utsname.h - system name structure</string>
					<key>match</key>
					<string>(\s*)(\b(?:uname)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.sys/wait.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>sys/wait.h - declarations for waiting</string>
					<key>match</key>
					<string>(\s*)(\b(?:wait(?:|p?id))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.syslog.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>syslog.h - definitions for system error logging</string>
					<key>match</key>
					<string>(\s*)(\b(?:LOG_MASK|(close|open|sys)log|setlogmask)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.termios.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>termios.h - define values for termios</string>
					<key>match</key>
					<string>(\s*)(\b(?:cf(g|s)et(?:ispeed|ospeed)|tc(?:drain|flow|flush|(g|s)etattr|getsid|sendbreak))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.trace.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>trace.h - tracing</string>
					<key>match</key>
					<string>(\s*)(\b(?:posix_trace_(?:attr_(?:destroy|get(?:clockres|createtime|genversion|inherited|logfullpolicy|logsize|max(?:datasize|(system|user)eventsize)|name|stream(fullpolicy|size))|init|set(?:inherited|log(fullpolicy|size)|maxdatasize|name|stream(fullpolicy|size)))|clear|close|create(_withlog)?|event(?:|id_(?:equal|get_name|open)|set_(?:add|del|empty|fill|ismember)|typelist_(?:getnext_id|rewind))|flush|get_(?:attr|filter|status)|getnext_event|open|rewind|set_filter|shutdown|start|stop|timedgetnext_event|trid_eventid_open|trygetnext_event))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.ulimit.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ulimit.h - ulimit commands</string>
					<key>match</key>
					<string>(\s*)(\b(?:ulimit)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.unistd.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>unistd.h - standard symbolic constants and types</string>
					<key>match</key>
					<string>(\s*)(\b(?:access|alarm|chdir|chown|close|confstr|crypt|dup2?|_exit|encrypt|exec(?:l(e|p)?|v(e|p)?)|faccessat|fch(?:dir|own(at)?)|fdatasync|fexecve|fork|fpathconf|fsync|ftruncate|get(?:cwd|e?gid|euid|groups|host(id|name)|login(_r)?|opt|p(g|p)?id|pgrp|(s|u)id)|isatty|lchown|link(at)?|lockf|lseek|nice|pathconf|pause|pipe|pread|pwrite|read(?:link(at)?|)|rmdir|set(?:(|e|p|re)gid|(|e|re)uid|sid|pgrp)|sleep|swab|symlink(at)?|sync|sysconf|tc(get|set)pgrp|truncate|ttyname(_r)?|unlink(at)?|write)\b))</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.utime.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>utime.h - access and modification times structure</string>
					<key>match</key>
					<string>(\s*)(\b(?:utime)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.utmpx.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>utmpx.h - user accounting database definitions</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:end|get|set)utxent|getutx(id|line)|pututxline)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.wordexp.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>wordexp.h - word-expansion types</string>
					<key>match</key>
					<string>(\s*)(\b(?:word(exp|free))\b)</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c.posix</string>
	<key>uuid</key>
	<string>FBB3AE4A-1D53-4394-8E06-FA460C979C3E</string>
</dict>
</plist>
