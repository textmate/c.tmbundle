<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array/>
	<key>name</key>
	<string>C Standard Library</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>comment</key>
			<string>assert.h - verify program assertion</string>
			<key>match</key>
			<string>\b(?:NDEBUG)\b</string>
			<key>name</key>
			<string>support.constant.assert.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>complex.h - complex arithmetic</string>
			<key>match</key>
			<string>\b(?:_Imaginary_I|_Complex_I)\b</string>
			<key>name</key>
			<string>support.constant.complex.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>errno.h - system error numbers</string>
			<key>match</key>
			<string>\b(E(?:2BIG|A(?:CCES|DDRINUSE|DDRNOTAVAIL|FNOSUPPORT|GAIN|LREADY)|B(?:ADF|ADMSG|USY)|C(?:ANCELED|HILD|ONNABORTED|ONNREFUSED|ONNRESET)|D(?:EADLK|ESTADDRREQ|OM|QUOT)|EXIST|F(?:AULT|BIG)|HOSTUNREACH|I(?:DRM|LSEQ|NPROGRESS|NTR|NVAL|O|SCONN|SDIR)|LOOP|M(?:FILE|LINK|SGSIZE|ULTIHOP)|N(?:AMETOOLONG|ETDOWN|ETRESET|ETUNREACH|FILE|OBUFS|ODATA|ODEV|OENT|OEXEC|OLCK|OLINK|OMEM|OMSG|OPROTOOPT|OSPC|OSR|OSTR|OSYS|OTCONN|OTDIR|OTEMPTY|OTRECOVERABLE|OTSOCK|OTSUP|OTTY|XIO)|O(?:PNOTSUPP|VERFLOW|WNERDEAD)|P(?:ERM|IPE|ROTO|ROTONOSUPPORT|ROTOTYPE)|R(?:ANGE|OFS)|S(?:PIPE|RCH|TALE)|T(?:IME|IMEDOUT|XTBSY)|W(?:OULDBLOCK)|XDEV))\b</string>
			<key>name</key>
			<string>support.constant.errno.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fenv.h - floating-point environment</string>
			<key>match</key>
			<string>\b(?:FE_(?:D(?:IVBYZERO|FL_ENV|OWNWARD)|I(?:NEXACT|NVALID)|OVERFLOW|T(?:ONEAREST|OWARDZERO)|U(?:PWARD|NDERFLOW)|ALL_EXCEPT))\b</string>
			<key>name</key>
			<string>support.constant.fenv.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>float.h - floating types</string>
			<key>match</key>
			<string>\b(?:FLT_(?:DIG|EPSILON|EVAL_METHOD|HAS_SUBNORM|MANT_DIG|MAX|MAX_EXP|MAX_10_EXP|MIN|MIN_10_EXP|MIN_EXP|RADIX|ROUNDS)|DBL_(?:DIG|EPSILON|HAS_SUBNORM|MANT_DIG|MAX|MAX_EXP|MAX_10_EXP|MIN|MIN_EXP|MIN_10_EXP)|DECIMAL_DIG|LDBL_(?:DIG|EPSILON|HAS_SUBNORM|MANT_DIG|MAX|MAX_EXP|MAX_10_EXP|MIN|MIN_EXP|MIN_10_EXP))\b</string>
			<key>name</key>
			<string>support.constant.float.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>inttypes.h - fixed size integer types</string>
			<key>match</key>
			<string>\b((?:PRI|SCN)((?:d|i|o|u|x|X)(?:LEAST|FAST|MAX|PTR)?)(?:8|16|32|64)?)\b</string>
			<key>name</key>
			<string>support.constant.inttypes.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>iso646.h - alternative spellings</string>
			<key>match</key>
			<string>\b(?:and|and_eq|bitand|bitor|compl|not|not_eq|or|or_eq|xor|xor_eq)\b</string>
			<key>name</key>
			<string>support.constant.iso646.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>limits.h - implementation-defined constants</string>
			<key>match</key>
			<string>\b(?:AIO_(?:LISTIO_|PRIO_DELTA_|)MAX|(?:ARG|ATEXIT)_MAX|BC_(?:BASE|DIM|SCALE|STRING)_MAX|CHAR_(?:BIT|MAX|MIN)|(?:CHARCLASS_NAME|CHILD|COLL_WEIGHTS|DELAYTIMER|EXPR_NEST)_MAX|FILESIZEBITS|(?:HOST_NAME|IOV)_MAX|INT_(?:MIN|MAX)|(?:LINE|LINK|LOGIN_NAME)_MAX|LLONG_(?:MAX|MIN)|LONG_(?:BIT|MAX|MIN)|MAX_(?:CANON|INPUT)|MB_LEN_MAX|MQ_(?:OPEN_MAX|PRIO_MAX)|(?:NAME|NGROUPS)_MAX|NL_(?:ARG|LANG|MSG|SET|TEXT)MAX|NZERO|OPEN_MAX|PAGESIZE|PAGE_SIZE|PATH_MAX|PIPE_BUF|POSIX_(?:ALLOC_SIZE_MIN|REC_(?:INCR_XFER_SIZE|MAX_XFER_SIZE|MIN_XFER_SIZE|XFER_ALIGN)|TRACE_UNNAMED_USER_EVENT)|PTHREAD_(?:DESTRUCTOR_ITERATIONS|KEYS_MAX|STACK_MIN|THREADS_MAX)|(?:RE_DUP|RTSIG)_MAX|(?:SHRT|SCHAR)(?:_MAX|_MIN)|SSIZE_MAX|SEM_(?:NSEMS|VALUE)_MAX|(?:SIGQUEUE|SS_REPL|STREAM|SYMLINK|SYMLOOP|TIMER)_MAX|TRACE_(?:EVENT_NAME|NAME|SYS|USER_EVENT)_MAX|(?:TTY_NAME|TZNAME|UCHAR|UINT|ULLONG|ULONG|USHRT)_MAX|WORD_BIT)\b</string>
			<key>name</key>
			<string>support.constant.limits.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>locale.h - category macros</string>
			<key>match</key>
			<string>\b(?:LC_(?:ALL(?:|_MASK)|COLLATE(?:|_MASK)|CTYPE(?:|_MASK)|GLOBAL_LOCALE|MESSAGES(?:|_MASK)|MONETARY(?:|_MASK)|NUMERIC(?:|_MASK)|TIME(?:|_MASK)))\b</string>
			<key>name</key>
			<string>support.constant.locale.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>math.h - mathematical declarations</string>
			<key>match</key>
			<string>\b(?:FP_(?:FAST_FMA(?:|F|L)|ILOGB(?:0|NAN)|INFINITE|NAN|(?:SUB)?NORMAL|ZERO)|HUGE_VAL(?:|F|L)|INFINITY|M_(?:E|LOG(?:2E|10E)|LN(?:2|10)|PI|PI_(?:2|4)|(?:1|2)_PI|2_SQRTPI|SQRT(?:2|1_2))|MATH_ERR(?:NO|EXCEPT)|MAXFLOAT|NAN)\b</string>
			<key>name</key>
			<string>support.constant.math.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>signal.h - signals</string>
			<key>match</key>
			<string>\b(?:(?:SIG_(?:(UN)?BLOCK|DFL|ERR|HOLD|IGN|SETMASK)|SIGEV_(?:NONE|SIGNAL|THREAD)|SIG(?:ABRT|ALRM|BUS|CHLD|CONT|FPE|HUP|K?ILL|INT|PIPE|POLL|PROF|QUIT|RT(?:MIN|MAX)|SEGV|STOP|STKSZ|SYS|TERM|TSTP|TTIN|TTOU|USR(1|2)|TRAP|URG|VTALRM|XCPU|XFSZ)|SA_(?:NOCLD(?:STOP|WAIT)|ONSTACK|RESETHAND|RESTART|SIGINFO|NODEFER)|SS_(?:ONSTACK|DISABLE)|MINSIGSTKSZ|ILL_(?:ILL(?:OPC|OPN|ADR|TRP)|PRV(?:OPC|REG)|COPROC|BADSTK)|FPE_(?:INT(DIV|OVF)|FLT(DIV|OVF|UND|RES|INV|SUB))|SEGV_(?:MAPERR|ACCERR)|BUS_(?:ADRALN|ADRERR|OBJERR)|TRAP_(?:BRKPT|TRACE)|CLD_(?:EXITED|KILLED|DUMPED|TRAPPED|STOPPED|CONTINUED)|POLL_(?:IN|OUT|MSG|ERR|PRI|HUP)|SI_(?:USER|QUEUE|TIMER|ASYNCIO|MESGQ)))\b</string>
			<key>name</key>
			<string>support.constant.signal.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdalign.h - alignas and alignof</string>
			<key>match</key>
			<string>\b(?:__align(as|of)_is_defined)\b</string>
			<key>name</key>
			<string>support.constant.stdalign.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdatomic.h - atomic types</string>
			<key>match</key>
			<string>\b(?:ATOMIC_(?:BOOL|CHAR|CHAR(16|32)_T|WCHAR_T|SHORT|INT|L?LONG|POINTER)_LOCK_FREE|ATOMIC_FLAG_INIT|memory_order_(?:relaxed|consume|acquire|release|acq_rel|seq_cst))\b</string>
			<key>name</key>
			<string>support.constant.stdatomic.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdbool.h - boolean type and values</string>
			<key>match</key>
			<string>\b(?:__bool_true_false_are_defined|true|false)\b</string>
			<key>name</key>
			<string>support.constant.stdbool.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stddef.h - standard type definitions</string>
			<key>match</key>
			<string>\b(?:NULL)\b</string>
			<key>name</key>
			<string>support.constant.stddef.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdint.h - integer types</string>
			<key>match</key>
			<string>\b(?:INT(_FAST|_LEAST)?(8|16|32|64)_(MIN|MAX)|INT(PTR|MAX)_(MAX|MIN)|UINT(_FAST|_LEAST)?(8|16|32|64)_(MAX|MIN)|UINT(PTR|MAX)_MAX|(?:PTRDIFF_|SIG_ATOMIC_|WCHAR_|WINT_)(MAX|MIN)|SIZE_MAX)\b</string>
			<key>name</key>
			<string>support.constant.stdint.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdio.h - standard buffered input/output</string>
			<key>match</key>
			<string>\b(?:BUFSIZ|L_(?:ctermid|tmpnam(?:|_S))|_IO(?:F|L|N)BF|SEEK_(?:CUR|END|SET)|(?:FILENAME|FOPEN)_MAX|TMP_MAX(?:|_S)|EOF|P_tmpdir|std(?:err|in|out))\b</string>
			<key>name</key>
			<string>support.constant.stdio.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdlib.h - standard library definitions</string>
			<key>match</key>
			<string>\b(?:EXIT_(FAILURE|SUCCESS)|(RAND|MB_CUR)_MAX)\b</string>
			<key>name</key>
			<string>support.constant.stdlib.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>threads.h - thread library</string>
			<key>match</key>
			<string>\b(?:TSS_DTOR_ITERATIONS|__STDC_NO_THREADS__|thrd_(?:success|nomem|timedout|busy|erro|)|mtx_(?:plain|recursive|timed)|ONCE_FLAG_INIT|thread_local|_Thread_local)\b</string>
			<key>name</key>
			<string>support.constant.threads.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>time.h - time types</string>
			<key>match</key>
			<string>\b(?:CLOCKS_PER_SEC|CLOCK_(?:MONOTONIC|(PROCESS|THREAD)_CPUTIME_ID|REALTIME)|TIME(?:R_ABSTIME|_UTC))\b</string>
			<key>name</key>
			<string>support.constant.time.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>uchar.h - UTF-16 and UTF-32 character utilities</string>
			<key>match</key>
			<string>\b(?:__STDC_UTF_(16|32)__)\b</string>
			<key>name</key>
			<string>support.constant.uchar.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>wchar.h - wide-character handling</string>
			<key>match</key>
			<string>\b(?:WEOF)\b</string>
			<key>name</key>
			<string>support.constant.wchar.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>complex.h - complex arithmetic</string>
			<key>match</key>
			<string>\b(?:imaginary|complex)\b</string>
			<key>name</key>
			<string>support.type.complex.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>fenv.h - floating-point environment</string>
			<key>match</key>
			<string>\b(?:fe(?:nv_t|xcept_t))\b</string>
			<key>name</key>
			<string>support.type.fenv.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>inttypes.h - fixed size integer types</string>
			<key>match</key>
			<string>\b(?:imaxdiv_t)\b</string>
			<key>name</key>
			<string>support.type.inttypes.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>locale.h - category macros</string>
			<key>match</key>
			<string>\b(?:locale_t)\b</string>
			<key>name</key>
			<string>support.type.locale.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>math.h - mathematical declarations</string>
			<key>match</key>
			<string>\b(?:(?:float|double)_t)\b</string>
			<key>name</key>
			<string>support.type.math.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>setjmp.h - stack environment declarations</string>
			<key>match</key>
			<string>\b(?:(?:jmp|sigjmp)_buf)\b</string>
			<key>name</key>
			<string>support.type.setjump.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>signal.h - signals</string>
			<key>match</key>
			<string>\b(?:(?:sig(?:_atomic|set)|(?:m|u)context|stack|siginfo)_t)\b</string>
			<key>name</key>
			<string>support.type.signal.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdalign.h - alignas and alignof</string>
			<key>match</key>
			<string>\b(?:align(?:as|of))\b</string>
			<key>name</key>
			<string>support.type.stdalign.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdarg.h - handle variable argument list</string>
			<key>match</key>
			<string>\b(?:va_list)\b</string>
			<key>name</key>
			<string>support.type.stdarg.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdatomic.h - atomic types</string>
			<key>match</key>
			<string>\b(?:_Atomic|memory_order|atomic_(?:flag|bool|(|s|u)char|u?short|u?int|u?ll?ong|(?:char(?:16|32)|wchar|int_(?:least(?:8|16|32|64)|fast(?:8|16|32|64))|uint_(?:fast(?:8|16|32|64)|least(?:8|16|32|64))|intptr|uintptr|size|ptrdiff|intmax|uintmax)_t))\b</string>
			<key>name</key>
			<string>support.type.stdatomic.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdbool.h - boolean type and values</string>
			<key>match</key>
			<string>\b(?:(b|_B)ool)\b</string>
			<key>name</key>
			<string>support.type.stdbool.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stddef.h - standard type definitions</string>
			<key>match</key>
			<string>\b(?:(?:ptrdiff|wchar|size|max_align)_t)\b</string>
			<key>name</key>
			<string>support.type.stddef.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdint.h - integer types</string>
			<key>match</key>
			<string>\b(?:u?int(_fast|_least)?(?:8|16|32|64)_t|u?int(max|ptr)_t)\b</string>
			<key>name</key>
			<string>support.type.stdint.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdio.h - standard buffered input/output</string>
			<key>match</key>
			<string>\b(?:FILE|fpos_t)\b</string>
			<key>name</key>
			<string>support.type.stdio.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdlib.h - standard library definitions</string>
			<key>match</key>
			<string>\b(?:(?:(l|ll)?div)_t)\b</string>
			<key>name</key>
			<string>support.type.stdlib.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>stdnoreturn.h - noreturn macro</string>
			<key>match</key>
			<string>\b(?:(?:n|_N)oreturn)\b</string>
			<key>name</key>
			<string>support.type.stdnoreturn.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>threads.h - thread library</string>
			<key>match</key>
			<string>\b(?:(?:thrd(_start)?|mtx|cnd|tss(_dtor)?)_t|once_flag)\b</string>
			<key>name</key>
			<string>support.type.threads.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>uchar.h - UTF-16 and UTF-32 character utilities</string>
			<key>match</key>
			<string>\b(?:char(16|32)_t)\b</string>
			<key>name</key>
			<string>support.type.uchar.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>wchar.h - wide-character handling</string>
			<key>match</key>
			<string>\b(?:(?:mbstate|wctype|wint)_t)\b</string>
			<key>name</key>
			<string>support.type.wchar.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>wctype.h - wide-character classification and mapping utilities</string>
			<key>match</key>
			<string>\b(?:wctrans_t)\b</string>
			<key>name</key>
			<string>support.type.wctype.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>errno.h - system error numbers</string>
			<key>match</key>
			<string>\b(?:errno)\b</string>
			<key>name</key>
			<string>support.variable.errno.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>math.h - mathematical declarations</string>
			<key>match</key>
			<string>\b(?:signgam)\b</string>
			<key>name</key>
			<string>support.variable.math.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>signal.h - signals</string>
			<key>match</key>
			<string>\b(?:si_(?:addr|pid|status|uid|band))\b</string>
			<key>name</key>
			<string>support.variable.signal.c</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>time.h - time types</string>
			<key>match</key>
			<string>\b(?:daylight|timezone|tzname|getdate_err)\b</string>
			<key>name</key>
			<string>support.variable.time.c</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.assert.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>assert.h - verify program assertion</string>
					<key>match</key>
					<string>(\s*)(\b(?:assert|static_assert)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.complex.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>complex.h - complex arithmetic</string>
					<key>match</key>
					<string>(\s*)(\b(?:CMPL(?:X|XF|XL)|crea(?:l|lf|ll)|cima(?:g|gl|gf)|cab(?:s|sf|sl)|car(?:g|gf|gl)|con(?:j|jf|jl)|cpro(?:j|jf|jl)|cex(?:p|pl|pf)|clo(?:g|gf|gl)|cpo(?:w|wf|wl)|csqr(?:t|tf|tl)|csi(?:n|nf|nl)|cco(?:s|sf|sl)|cta(?:n|nf|nl)|casi(?:n|nf|nl)|caco(?:s|sf|sl)|cata(?:n|nf|nl)|csin(?:h|hf|hl)|ccos(?:h|hf|hl)|ctan(?:h|hf|hl)|casin(?:h|hf|hl)|cacos(?:h|hf|hl)|catan(?:h|hf|hl))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.ctype.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>ctype.h - character types</string>
					<key>match</key>
					<string>(\s*)(\b(?:is(?:alnum(_l)?|alpha(_l)?|ascii|blank(_l)?|cntrl(_l)?|digit(_l)?|graph(_l)?|lower(_l)?|print(_l)?|punct(_l)?|space(_l)?|upper(_l)?|xdigit(_l)?)|to(?:ascii|lower(_l)?|upper(_l)?)|_(?:toupper|tolower))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.fenv.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fenv.h - floating-point environment</string>
					<key>match</key>
					<string>(\s*)(\b(?:fe(?:clearexcept|getenv|getexceptflag|getround|holdexcept|raiseexcept|setenv|setexceptflag|setround|testexcept|updateenv))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.inttypes.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>inttypes.h - fixed size integer types</string>
					<key>match</key>
					<string>(\s*)(\b(?:imax(?:abs|div)|strto(?:imax|umax)|wcsto(?:imax|umax))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.locale.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>locale.h - category macros</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:dup|free|new|set|use)locale|localeconv)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.math.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>math.h - mathematical declarations</string>
					<key>match</key>
					<string>(\s*)(\b(?:acos(?:|f|h|hf|hl|l)|asin(?:|f|h|hf|hl|l)|atan(?:|2|2f|2l|f|h|hf|hl|l)|cbrt(?:|f|l)|ceil(?:|f|l)|copysign(?:|f|l)|cos(?:|f|h|hf|hl|l)|erf(?:|c|cf|cl|f|l)|exp(?:|2|2f|2l|f|l|m1|m1f|m1l)|fabs(?:|f|l)|fdim(?:|f|l)|floor(?:|f|l)|fma(?:|f|l)|fmax(?:|f|l)|fmin(?:|f|l)|fmod(?:|f|l)|fpclassify|frexp(?:|l|f)|hypot(?:|f|l)|ilogb(?:|f|l)|is(?:finite|greater(?:|equal)|inf|less(?:|equal|greater)|nan|normal|unordered)|j(?:0|1|n)|ldexp(?:|f|l)|lgamma(?:|f|l)|llrint(?:|f|l)|llround(?:|f|l)|log(?:|10|10f|10l|1p|1pf|1pl|2|2f|2l|b|bf|bl|f|l)|lrint(?:|f|l)|lround(?:|f|l)|modf(?:|f|l)|nan(?:|f|l)|nearbyint(?:|f|l)|next(?:after(?:|f|l)|toward(?:|f|l))|pow(?:|f|l)|remainder(?:|f|l)|remquo(?:|l|f)|rint(?:|f|l)|round(?:|f|l)|scalb(?:ln|lnf|lnl|n|nf|nl)|signbit|sin(?:|f|h|hf|hl|l)|sqrt(?:|f|l)|tan(?:|f|h|hf|hl|l)|tgamma(?:|f|l)|trunc(?:|f|l)|y(?:0|1|n))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.setjmp.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>setjmp.h - stack environment declarations</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:_?long|_?set|sig(?:long|set))jmp)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.signal.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>signal.h - signals</string>
					<key>match</key>
					<string>(\s*)(\b(?:kill(?:|pg)|psig(?:info|nal)|pthread_(?:kill|sigmask)|raise|sig(?:action|addset|altstack|(?:del|empty|fill|)set|hold|ignore|interrupt|ismember|nal|pause|pending|procmask|queue|relse|suspend|(timed)?wait(info)?))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdalign.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdalign.h - alignas and alignof</string>
					<key>match</key>
					<string>(\s*)(\b(?:(_A|a)lign(?:as|of))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdarg.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdarg.h - handle variable argument list</string>
					<key>match</key>
					<string>(\s*)(\b(?:va_(?:start|copy|end|arg))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdatomic.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdatomic.h - atomic types</string>
					<key>match</key>
					<string>(\s*)(\b(?:kill_dependency|atomic_(?:flag_(?:test_and_set(?:|_explicit)|clear(_explicit)?)|init|is_lock_free|(?:store|load|exchange)(_explicit)?|compare_exchange_(?:strong|weak|(strong|weak)_explicit)|fetch_(?:(?:add|sub|or|xor|and)(_explicit)?)|(?:thread|signal)_fence)|ATOMIC_VAR_INIT)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stddef.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stddef.h - standard type definitions</string>
					<key>match</key>
					<string>(\s*)(\b(?:offsetof)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdint.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdint.h - standard integer types</string>
					<key>match</key>
					<string>(\s*)(\b(?:U?INT(8|16|32|64|MAX)_C)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdio.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdio.h - standard buffered input/output</string>
					<key>match</key>
					<string>(\s*)(\b(?:clearerr|ctermid|dprintf|f(?:close|dopen|eof|error|flush|get(c|pos|s)|ileno|lockfile|memopen|open(?:|_s)|printf(?:|_s)|put(c|s)|read|reopen(?:|_s)|scan(?:f|f_s)|seek(?:|o)|setpos|tello?|(?:try|un)lockfile|write|wide)|get(?:c|char|(?:c|char)_unlocked|delim|line|s|s_s)|open_memstream|pclose|perror|popen|printf(?:|_s)|put(?:c|char|(?:c|char)_unlocked|s)|re(?:move|name(at)?|wind)|scanf(?:|_s)|set(?:buf|vbuf)|s(?:n?print(?:f|f_s)|scan(?:f|f_s))|v(?:|sn?)printf(?:|_s)|vs?scanf(?:|_s))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.stdlib.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>stdlib.h - standard library definitions</string>
					<key>match</key>
					<string>(\s*)(\b(?:_Exit|a64l|abort|abs|aligned_alloc|at(_quick_)?exit|ato(f|i|ll?)|bsearch|calloc|div|(d|e|j|l|m|n|s)rand48|exit|free|get(?:env|env_s|subopt)|grantpt|initstate|l(?:64a|abs|cong48|div|labs|ldiv)|malloc|mb(?:len|stowcs(?:|_s)|towc)|mk(d|s)temp|posix_(?:memalign|openpt)|ptsname|putenv|qsort|quick_exit|rand(|_r|om)|real(?:loc|path)|seed48|set(?:env|key|state)|srand(?:|om)|strto(?:d|f|u?l|ld|u?ll)|system|un(?:lockpt|setenv)|wc(?:stombs(?:|_s)|tomb(?:|_s)))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.string.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>string.h - string operations</string>
					<key>match</key>
					<string>(\s*)(\b(?:mem(?:ccpy|chr|cmp|cpy|cpy(_s)?|move(_s)?|set(_s)?)|stpn?cpy|str(?:cat(_s)?|chr|cmp|coll(_l)?|cpy(_s)?|cspn|dup|error(?:|_l|_r|_s|len_s)|len|n(?:len(_s)?|cat(_s)?|cmp|cpy(_s)?|dup)|pbrk|rchr|signal|spn|str|tok(?:|_r|_s)|xfrm(_l)?))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.threads.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>threads.h - thread library</string>
					<key>match</key>
					<string>(\s*)(\b(?:thrd_(?:create|equal|current|sleep|yield|exit|detach|join)|mtx_(?:init|lock|(?:timed|un|try)lock|destroy)|call_once|cnd_(?:init|signal|broadcast|wait|timedwait|destroy)|tss_(?:create|(g|s)et|delete))\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.time.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>time.h - time types</string>
					<key>match</key>
					<string>(\s*)(\b(?:(?:asctime|ctime|gmtime|localtime)(?:|_r|_s)|clock(?:|_get(?:cpuclockid|res|time)|_nanosleep|_settime)|difftime|getdate|mktime|nanosleep|strftime(?:|_l)|strptime|time(?:|r_(?:create|delete|get(?:overrun|time)|settime))|tzset|timespec_get)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.uchar.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>uchar.h - UTF-16 and UTF-32 character utilities</string>
					<key>match</key>
					<string>(\s*)(\b(?:mbrtoc(16|32)|c(16|32)rtomb)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.wchar.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>wchar.h - wide-character handling</string>
					<key>match</key>
					<string>(\s*)(\b(?:btowc|f(get|put)(wc|ws)|fwide|(?:v?fw|v?sw|vw)(print|scan)f|getwc(har)?|isw(?:alnum|alpha|wcntrl|cntrl|ctype|digit|graph|lower|print|punct|space|upper|xdigit)|mb(?:rlen|rtowc|sinit|sn?rtowcs)|open_wmemstream|putwc(har)?|tow(low|upp)er|ungetwc|wcpn?cpy|wcrtomb|wcs(?:(?:casecmp|coll|ncasecmp|xfrm)(_l)?|cat|chr|n?cmp|cpy(_s)?|cspn|dup|ftime|n?len|(?:ncpy|n?cat)(_s)?|n?rtombs|pbrk|rchr|spn|str|to(d|f|k(_s)?|l(d|l)?|ul(l)?)?|nlen_s|width)|wc(?:tob|type|width)|wmem(?:chr|cmp|cpy(_s)?|move(_s)?|set)|w(print|scan)f)\b)</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.support.function.leading.c</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.wctype.c</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>wctype.h - wide-character classification and mapping utilities</string>
					<key>match</key>
					<string>(\s*)(\b(?:isw(?:alnum|alpha|blank|cntrl|ctype|digit|graph|lower|print|punct|space|upper|xdigit)_l|tow(?:ctrans(_l)?|(?:lower|upper)_l)|wc(?:(trans|type)(_l)?))\b)</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c.library</string>
	<key>uuid</key>
	<string>2CC50347-25BB-4A8A-85FF-B7ED3145285D</string>
</dict>
</plist>
